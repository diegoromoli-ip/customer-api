/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package au.com.intelligentpathways.customerapi.api;

import au.com.intelligentpathways.customerapi.model.Customer;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-02-02T10:24:20.940+10:00")

@Api(value = "profile", description = "the profile API")
public interface ProfileApi {

    @ApiOperation(value = "Add a new customer profile", nickname = "addProfile", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "profile", })
    @ApiResponses(value = { 
        @ApiResponse(code = 401, message = "Invalid authentication"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/profile",
        produces = { "application/xml", "application/json" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addProfile(@ApiParam(value = "Customer object that needs to be added", required = true) @Valid @RequestBody Customer body);


    @ApiOperation(value = "Deletes a customer profile", nickname = "deleteProfile", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "profile", })
    @ApiResponses(value = {
        @ApiResponse(code = 401, message = "Invalid authentication"),
        @ApiResponse(code = 404, message = "Customer not found") })
    @RequestMapping(value = "/profile",
        produces = { "application/xml", "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteProfile();


    @ApiOperation(value = "Retrieves customer profile", nickname = "getProfile", notes = "Retrieves logged-in customer profile", response = Customer.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "profile", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = Customer.class),
        @ApiResponse(code = 400, message = "Invalid request"),
        @ApiResponse(code = 404, message = "Customer not found"),
        @ApiResponse(code = 401, message = "Invalid authentication") })
    @RequestMapping(value = "/profile",
        produces = { "application/xml", "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Customer> getProfile();


    @ApiOperation(value = "Update an existing customer profile", nickname = "updateProfile", notes = "", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "profile", })
    @ApiResponses(value = {
        @ApiResponse(code = 401, message = "Invalid authentication"),
        @ApiResponse(code = 404, message = "Customer not found"),
        @ApiResponse(code = 400, message = "Validation exception") })
    @RequestMapping(value = "/profile",
        produces = { "application/xml", "application/json" },
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateProfile(@ApiParam(value = "Customer object that needs to be updated", required = true) @Valid @RequestBody Customer body);

}
